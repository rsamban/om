// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/rsamban/om/api"
)

type ProductConfigurer struct {
	StagedProductsStub        func() (api.StagedProductsOutput, error)
	stagedProductsMutex       sync.RWMutex
	stagedProductsArgsForCall []struct{}
	stagedProductsReturns     struct {
		result1 api.StagedProductsOutput
		result2 error
	}
	ConfigureStub        func(api.ProductsConfigurationInput) error
	configureMutex       sync.RWMutex
	configureArgsForCall []struct {
		arg1 api.ProductsConfigurationInput
	}
	configureReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ProductConfigurer) StagedProducts() (api.StagedProductsOutput, error) {
	fake.stagedProductsMutex.Lock()
	fake.stagedProductsArgsForCall = append(fake.stagedProductsArgsForCall, struct{}{})
	fake.recordInvocation("StagedProducts", []interface{}{})
	fake.stagedProductsMutex.Unlock()
	if fake.StagedProductsStub != nil {
		return fake.StagedProductsStub()
	} else {
		return fake.stagedProductsReturns.result1, fake.stagedProductsReturns.result2
	}
}

func (fake *ProductConfigurer) StagedProductsCallCount() int {
	fake.stagedProductsMutex.RLock()
	defer fake.stagedProductsMutex.RUnlock()
	return len(fake.stagedProductsArgsForCall)
}

func (fake *ProductConfigurer) StagedProductsReturns(result1 api.StagedProductsOutput, result2 error) {
	fake.StagedProductsStub = nil
	fake.stagedProductsReturns = struct {
		result1 api.StagedProductsOutput
		result2 error
	}{result1, result2}
}

func (fake *ProductConfigurer) Configure(arg1 api.ProductsConfigurationInput) error {
	fake.configureMutex.Lock()
	fake.configureArgsForCall = append(fake.configureArgsForCall, struct {
		arg1 api.ProductsConfigurationInput
	}{arg1})
	fake.recordInvocation("Configure", []interface{}{arg1})
	fake.configureMutex.Unlock()
	if fake.ConfigureStub != nil {
		return fake.ConfigureStub(arg1)
	} else {
		return fake.configureReturns.result1
	}
}

func (fake *ProductConfigurer) ConfigureCallCount() int {
	fake.configureMutex.RLock()
	defer fake.configureMutex.RUnlock()
	return len(fake.configureArgsForCall)
}

func (fake *ProductConfigurer) ConfigureArgsForCall(i int) api.ProductsConfigurationInput {
	fake.configureMutex.RLock()
	defer fake.configureMutex.RUnlock()
	return fake.configureArgsForCall[i].arg1
}

func (fake *ProductConfigurer) ConfigureReturns(result1 error) {
	fake.ConfigureStub = nil
	fake.configureReturns = struct {
		result1 error
	}{result1}
}

func (fake *ProductConfigurer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.stagedProductsMutex.RLock()
	defer fake.stagedProductsMutex.RUnlock()
	fake.configureMutex.RLock()
	defer fake.configureMutex.RUnlock()
	return fake.invocations
}

func (fake *ProductConfigurer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
